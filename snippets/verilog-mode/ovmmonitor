class ${1:ovc_name}_monitor extends ovm_monitor;

   string tID;
   virtual interface ${2:ovc_if} vif;
   ${3:ovc_item} trans;
   event e_trans_collected; // event to signal transaction collected
   // TLM port for scoreboard communication
   //  (implement scoreboard write method if needed)
   ovm_analysis_port #($3) sb_post;

   \`ovm_component_utils_begin($1_monitor)
      \`ovm_field_object(trans, OVM_ALL_ON)
   \`ovm_component_utils_end

   task collect_data();
      forever
  begin
    //put code to collect bus transactions here
       #10 ;

       #10 ;

       ->e_trans_collected; //signal transaction collection complete
     //post good transactions to scoreboard if enabled
     if (sb_post.size() > 0)
         sb_post.write(trans);
    end;
   endtask: collect_data

   // to FIX stuff for covergroup
   /*
    //shell code for covergroup
    covergroup cov_trans @ e_trans_collected;
    cg1: coverpoint trans..$fields[2].
    { bins MIN[]     = {0};
    bins MAX[]     = {63};
    }
endgroup
    */

   task run();
      \`message(OVM_MEDIUM, ("$1_monitor: running"))
      ovm_report_info(tID, $psprintf("%s: running", tID), OVM_MEDIUM);
      collect_data();
   endtask: run

   virtual function void report();
      //fill in any reporting code if needed
      logic dummy;
   endfunction: report

   //new() function needs to be listed last so other items defined
   function new(string name, ovm_component parent);
      super.new(name, parent);
      tID = get_type_name();
      tID = tID.toupper();
      // to FIX stuff for covergroup
      /*
       cov_trans = new();
       cov_trans.set_inst_name({get_full_name(), ".cov_trans"});
       */
      trans = new();
      sb_post = new("sb_post", this);
   endfunction: new

endclass: $1_monitor
