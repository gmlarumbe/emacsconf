// ${1:name_xactn} -- name of the transaction
// ${2:#(int DW=32, int AW=32)} -- transaction descriptor class parameters

class $1 $2 extends vmm_data;
   // some typedefs to ease up parameters usage
   typedef $1 ${2:$(replace-regexp-in-string "\\\\(?:\\\\w+\\\\s-+\\\\)+\\\\(\\\\w+\\\\)\\\\s-*=\\\\s-*\\\\w+" "\\\\1" text)} transaction_type;
   typedef vmm_channel_typed #(transaction_type) channel_type;
   // static defines to make parameters available as object members
   ${2:$(replace-regexp-in-string "\\\\s-*\\\\(\\\\(?:\\\\w+\\\\s-+\\\\)+\\\\)\\\\(\\\\w+\\\\)\\\\s-*=\\\\s-*\\\\w+\\\\s-*,?" "const static \\\\1 \\\\2_VALUE = \\\\2;
   " (replace-regexp-in-string "#(\\\\(.*\\\\))" "\\\\1" text))}
   static vmm_log log = new("$1", "class");

   // ToDo: Modify/add symbolic transaction identifiers to match
$0
   typedef enum {READ, WRITE } kinds_e;
   rand kinds_e kind;

   // vmm rule 4-59: All class properties corresponding to a
   // protocol property or field shall have the rand attribute

   // use rand snippet to define attributes with constraints :)
   // rand ....

   // transaction time
   time xactn_time;

   function new();
      super.new(this.log);
   endfunction: new

   // VMM 4-76: All classes derived from the vmm_data class shall provide
   // implementations for the psdisplay(), is_valid(), allocate(), copy() and
   // compare() virtual methods.
   extern virtual function string psdisplay(string prefix = "");

   extern virtual function bit is_valid(bit silent = 1, int kind = -1);

   extern virtual function vmm_data allocate();

   extern virtual function vmm_data copy(vmm_data to=null);

   extern virtual function bit compare(vmm_data to,
                      output string diff,
                       input int kind = -1);

   // VMM 4-77: All classes derived from the vmm_data class should provide
   // implementations for the byte_size(), byte_pack() and byte_unpack() virtual
   // methods.
   extern virtual function int unsigned byte_size(input int kind = -1);

   extern virtual function int unsigned byte_pack(ref logic[7:0] bytes[],
                          input int unsigned
                              offset = 0,
                         input int kind = -1);

   extern virtual function int unsigned byte_unpack(const ref logic[7:0]
                                 bytes[],
                            input int unsigned
                                  offset = 0,
                         input int len = -1,
                           input int kind = -1);

   // Pre-Randomize function. Add initialization of dynamic arrays here -- when
   // initializing, make there size maximum possible.
   function void pre_randomize();
      super.pre_randomize();
   endfunction // pre_randomize

   // Post-Randomize -- initialize the data which gets its value from the
   // randomized fields -- for example the CRC
   function void post_randomize();
      super.post_randomize();
   endfunction // post_randomize

endclass: $1

function vmm_data $1::allocate();
      transaction_type tr = new;
      return tr;
endfunction: allocate

// Copy the current value of the object instance to the specified instance
function vmm_data $1::copy(vmm_data to=null);
   transaction_type xactn;
   if (to != null) begin
     if (!$cast(xactn, to)) begin
 \`vmm_fatal(log, "Not a $1 instance");
 return null;
     end
   end else xactn = new;
   super.copy_data(xactn);

   \`vmm_fatal(log, "$1 Copy function not implemented yet");
   // xactn.kind = this.kind;
   // Copy class members here ...;

   return xactn;
endfunction: copy

function string $1::psdisplay(string prefix = "");
   // $sformat(psdisplay, "%s$1 %s @ 0x%h = 0h%h", prefix,
   //        this.kind.name(), // other variables here
   //        );
   \`vmm_fatal(log, "$1 psdisplay function not implemented yet");
endfunction: psdisplay

function bit $1::is_valid(bit silent = 1, int kind = -1);
   return 1;
endfunction: is_valid

// compare the values of various elements of the objects
// Use kind argument to implement partial compare etc.
function bit $1::compare(input vmm_data to, output string diff,
          input int kind = -1);
   transaction_type xactn;
   if(to == null) begin
      \`vmm_fatal(log, "Can not compare to NULL reference");
      // return 0; // After fatal, this line would not be reached anyway
   end // if (to == null)
   else if (!$cast(xactn, to)) begin
      \`vmm_fatal(log, "Can not copy a non-$1 instance");
      // return 0; // After fatal, this line would not be reached anyway
   end
   // if (this.kind != xactn.kind) begin
   //   $sformat(diff, "Kind %s != %s", this.kind, xactn.kind);
   //   return 0;
   // end
   // compare other variables here
   \`vmm_fatal(log, "$1 compare function not implemented yet");
   return 1;
endfunction: compare

function int unsigned $1::byte_size(input int kind = -1);
   \`vmm_fatal(log, "$1 byte_size function not implemented yet");
endfunction: byte_size

function int unsigned $1::byte_pack(ref logic[7:0] bytes[],
                  input int unsigned
                    offset = 0,
                   input int kind = -1);
   \`vmm_fatal(log, "$1 byte_pack function not implemented yet");
endfunction: byte_pack

function int unsigned $1::byte_unpack(const ref logic[7:0] bytes[],
                      input int unsigned offset = 0,
                    input int len = -1,
                   input int kind = -1);
   \`vmm_fatal(log, "$1 byte_unpack function not implemented yet");
endfunction: byte_unpack


// \`vmm_atomic_gen($1, "$1")
// \`vmm_scenario_gen($1, "$1")
