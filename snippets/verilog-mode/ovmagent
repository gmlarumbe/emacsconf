class ${1:ovc_name}_agent extends ovm_agent;

   ovm_active_passive_enum is_active;
   $1_sequencer sequencer;
   $1_driver driver;
   $1_monitor monitor;

   \`ovm_component_utils_begin($1_agent)
      \`ovm_field_enum(ovm_active_passive_enum, is_active, OVM_ALL_ON)
   \`ovm_component_utils_end

   function new(string name, ovm_component parent);
      super.new(name, parent);
   endfunction: new

   virtual function void build();
      super.build();
      monitor=$1_monitor::type_id::create("monitor", this);
      if (is_active == OVM_ACTIVE)
    begin
    driver=$1_driver::type_id::create("driver", this);
      sequencer=$1_sequencer::type_id::create("sequencer", this);
  end
   endfunction: build

   virtual function void connect();
      if (is_active == OVM_ACTIVE)
 begin
    driver.seq_item_port.connect(sequencer.seq_item_export);
   end
   endfunction: connect

   virtual function void assign_vif(virtual interface ${2:ovc_if} vif);
      monitor.vif = vif;
      if (is_active == OVM_ACTIVE)
        begin
     driver.vif=vif;
        end
   endfunction: assign_vif

endclass: $1_agent
