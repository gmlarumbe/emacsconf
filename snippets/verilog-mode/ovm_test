class test1 extends ovm_test;

     sve sve0;
     \`ovm_component_utils(test1)

     function new(string name, ovm_component parent);
  super.new(name, parent);
     endfunction: new

   virtual function void build();
      super.build();
      set_config_int("sve0.env0.agent0.sequencer", "count", 2);
      set_config_int("sve0.env0.agent0", "is_active", OVM_ACTIVE);
      set_config_string("sve0.env0.agent0.sequencer",
          "default_sequence", "${1:ovc_name}_seq1");
      sve0 = sve::type_id::create("sve0", this);
   endfunction: build

   task run();
      \`message(OVM_LOW, ("test1 running..."))
      ovm_top.print_topology();
      #10000
 //delay is simple "end of test" mechanism
   //use objections in sequences for better "end of test" detection
    \`message(OVM_LOW, ("User activated end of simulation"))
      global_stop_request();
   endtask: run

endclass: test1
